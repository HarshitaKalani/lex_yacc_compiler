%{
    int countn=1;
%}

%option yylineno

alpha [a-zA-Z]
digit [0-9]
unary "++"|"--"

%%

"<="                        { fprintf(stdout,"%d %s\n",countn,yytext); }
">="                        { fprintf(stdout,"%d %s\n",countn,yytext); }
"=="                        { fprintf(stdout,"%d %s\n",countn,yytext); }
"!="                        { fprintf(stdout,"%d %s\n",countn,yytext); }
">"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"<"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"&&"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"||"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"+"                         { fprintf(stdout,"%d %s\n",countn,yytext); }
"-"                         { fprintf(stdout,"%d %s\n",countn,yytext); }
"/"                         { fprintf(stdout,"%d %s\n",countn,yytext); }
"*"                         { fprintf(stdout,"%d %s\n",countn,yytext); }
\/\/.*                      { ; }
\/\*(.*\n)*.*\*\/           { ; } 
[ \t]*                      { ; }
[\n]                        { countn++; }
.	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
["].*["]                    { fprintf(stdout,"%d %s\n",countn,yytext); }
['].[']                     { fprintf(stdout,"%d %s\n",countn,yytext); }

"printf"                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"scanf"                     { fprintf(stdout,"%d %s\n",countn,yytext); }
"int"                       { fprintf(stdout,"%d %s\n",countn,yytext); }
"float"                     { fprintf(stdout,"%d %s\n",countn,yytext); }

"char"                      { fprintf(stdout,"%d %s\n",countn,yytext); }
"void"                      { fprintf(stdout,"%d %s\n",countn,yytext); }
"return"                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"for"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"if"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
"else"	                    { fprintf(stdout,"%d %s\n",countn,yytext); }
^"#include"[ ]*<.+\.h>      { fprintf(stdout,"%d %s\n",countn,yytext); }
"true"                      { fprintf(stdout,"%d %s\n",countn,yytext); }
"false"                     { fprintf(stdout,"%d %s\n",countn,yytext); }
[-]?{digit}+                { fprintf(stdout,"%d %s\n",countn,yytext); }
[-]?{digit}+\.{digit}{1,6}  { fprintf(stdout,"%d %s\n",countn,yytext); }
{alpha}({alpha}|{digit})*   { fprintf(stdout,"%d %s\n",countn,yytext); }
{unary}                     { fprintf(stdout,"%d %s\n",countn,yytext); }


%%

int yywrap() {
    return 1;
}

main()
{
extern FILE *yyin, *yyout; 
    
    printf("\nThe tokens generated by the program are shown as follows: \n\n");
    
    yyin = fopen("input.c", "r"); 
  
    yylex();
	 

    return 0; 
}